// automatically generated from `@stdlib/std/stdlib.fc` `/home/loren/hackathonton/miniApp/HackatonMiniApp/hackatonminiapp/contracts/build/FeePayment_FeePayment.fc` 
PROGRAM{
  DECLPROC __tact_context_get
  DECLPROC __tact_context_get_sender
  DECLPROC $FeePayment$_store
  DECLPROC $FeePayment$_load
  DECLPROC $Context$_get_value
  DECLPROC $FeePayment$_contract_load
  DECLPROC $FeePayment$_contract_store
  DECLPROC $FeePayment$_fun_getFeeNumerator
  DECLPROC $FeePayment$_fun_getFeeDenominator
  DECLPROC $SendParameters$_constructor_to_value_bounce_mode
  66904 DECLMETHOD %getFeeNumerator
  108932 DECLMETHOD %getFeeDenominator
  DECLPROC recv_internal
  DECLGLOBVAR __tact_context
  DECLGLOBVAR __tact_context_sender
  DECLGLOBVAR __tact_child_contract_codes
  DECLGLOBVAR __tact_randomized
  __tact_context_get PROCINLINE:<{
    __tact_context GETGLOB
    4 UNTUPLE
  }>
  __tact_context_get_sender PROCINLINE:<{
    __tact_context_sender GETGLOB
  }>
  $FeePayment$_store PROCINLINE:<{
    s2 s3 XCHG2
    STSLICE
    32 STU
    32 STU
  }>
  $FeePayment$_load PROCINLINE:<{
    LDMSGADDR
    32 LDU
    32 LDU
    3 -ROLL
  }>
  $Context$_get_value PROCINLINE:<{
    s1 s3 XCHG
    3 BLKDROP
  }>
  $FeePayment$_contract_load PROCINLINE:<{
    c4 PUSH
    CTOS
    $FeePayment$_load INLINECALLDICT
    1 3 BLKDROP2
  }>
  $FeePayment$_contract_store PROCINLINE:<{
    NEWC
    3 -ROLL
    $FeePayment$_store INLINECALLDICT
    ENDC
    c4 POP
  }>
  $FeePayment$_fun_getFeeNumerator PROCREF:<{
    OVER
  }>
  $FeePayment$_fun_getFeeDenominator PROCREF:<{
    DUP
  }>
  $SendParameters$_constructor_to_value_bounce_mode PROCINLINE:<{
    s0 s3 XCHG
    PUSHNULL
    PUSHNULL
    s4 s3 XCHG2
    PUSHNULL
    s3 s3 XCHG2
  }>
  %getFeeNumerator PROC:<{
    $FeePayment$_contract_load INLINECALLDICT
    $FeePayment$_fun_getFeeNumerator INLINECALLDICT
    3 1 BLKDROP2
  }>
  %getFeeDenominator PROC:<{
    $FeePayment$_contract_load INLINECALLDICT
    $FeePayment$_fun_getFeeDenominator INLINECALLDICT
    3 1 BLKDROP2
  }>
  recv_internal PROC:<{
    SWAP
    CTOS
    2 PUSHINT
    SDSKIPFIRST
    1 LDI
    1 LDI
    LDMSGADDR
    OVER
    s3 s4 XCHG
    s6 s6 XCHG2
    4 TUPLE
    __tact_context SETGLOB
    s0 s2 XCHG
    __tact_context_sender SETGLOB
    $FeePayment$_contract_load INLINECALLDICT
    s0 s4 XCHG
    IFJMP:<{
      4 BLKDROP
    }>
    s0 s2 XCHG
    32 LDUQ 130 THROWIFNOT
    OVER
    2607281167 PUSHINT
    EQUAL
    IFJMP:<{
      NIP
      LDVARUINT16
      LDMSGADDR
      DROP
      s1 s3 PUXC
      MUL
      s0 s4 XCHG2
      DIV
      51754 PUSHINT
      __tact_context_get INLINECALLDICT
      $Context$_get_value INLINECALLDICT
      s5 s2 PUSH2
      ADD
      GEQ
      THROWANYIFNOT
      s2 s3 XCHG2
      FALSE
      2 PUSHINT
      $SendParameters$_constructor_to_value_bounce_mode INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      SWAP
      FALSE
      2 PUSHINT
      $SendParameters$_constructor_to_value_bounce_mode INLINECALLDICT
          NEWC
          b{01} STSLICECONST  // store tag = $0 and ihr_disabled = true
          1 STI               // store `bounce`
          b{000} STSLICECONST // store bounced = false and src = addr_none
          STSLICE             // store `to`
          SWAP
          STGRAMS             // store `value`
          105 PUSHINT         // 1 + 4 + 4 + 64 + 32
          STZEROES            // store currency_collection, ihr_fee, fwd_fee, created_lt and created_at
          // → Stack state
          // s0: Builder
          // s1: `data`
          // s2: `code`
          // s3: `body`
          // s4: `mode`
          // Group 2: Placing the Builder after code and data, then checking those for nullability
          s2 XCHG0
          DUP2
          ISNULL
          SWAP
          ISNULL
          AND
          // → Stack state
          // s0: -1 (true) if `data` and `code` are both null, 0 (false) otherwise
          // s1: `code`
          // s2: `data`
          // s3: Builder
          // s4: `body`
          // s5: `mode`
          // Group 3: Left branch of the IFELSE, executed if s0 is -1 (true)
          <{
              DROP2 // drop `data` and `code`, since either of those is null
              b{0} STSLICECONST
          }> PUSHCONT
          // Group 3: Right branch of the IFELSE, executed if s0 is 0 (false)
          <{
              // _ split_depth:(Maybe (## 5))
              //   special:(Maybe TickTock)
              //   code:(Maybe ^Cell)
              //   data:(Maybe ^Cell)
              //   library:(Maybe ^Cell)
              // = StateInit;
              ROT                // place message Builder on top
              b{10} STSLICECONST // store Maybe = true, Either = false
              // Start composing inlined StateInit
              b{00} STSLICECONST // store split_depth and special first
              STDICT             // store code
              STDICT             // store data
              b{0} STSLICECONST  // store library
          }> PUSHCONT
          // Group 3: IFELSE that does the branching shown above
          IFELSE
          // → Stack state
          // s0: Builder
          // s1: null or StateInit
          // s2: `body`
          // s3: `mode`
          // Group 4: Finalizing the message
          STDICT // store `body` as ref with an extra Maybe bit, since `body` might be null
          ENDC
          // → Stack state
          // s0: Cell
          // s1: `mode`
          // Group 5: Sending the message, with `mode` on top
          SWAP
          SENDRAWMSG // https://github.com/tact-lang/tact/issues/1558
      __tact_context_get_sender INLINECALLDICT
          NEWC
          x{42_} STSLICECONST // .storeUint(0x10, 6)
          STSLICE          // .storeAddress(to)
          0 PUSHINT        // 0
          111 STUR         // .storeUint(0, 111)
                           // 4 zeros for coins and 107 zeros for lt, fees, etc.
          ENDC
          66 PUSHINT       // SendRemainingValue | SendIgnoreErrors
          SENDRAWMSG
    }>
    s3 POP
    s3 POP
    s0 s2 XCHG
    3235881164 PUSHINT
    EQUAL
    IFJMP:<{
      32 LDU
      32 LDU
      DROP
      34358 PUSHINT
      __tact_context_get_sender INLINECALLDICT
      s4 PUSH
      SDEQ
      THROWANYIFNOT
      $FeePayment$_contract_store INLINECALLDICT
    }>
    2DROP
    130 THROW
  }>
}END>c
