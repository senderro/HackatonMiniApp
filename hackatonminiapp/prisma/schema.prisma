generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   BigInt            @id
  username             String?
  first_name           String?
  last_name            String?
  created_at           DateTime          @default(now())
  bags                 BagUser[]
  transactions         Transaction[]
  bags_admin           Bag[]             @relation("AdminOf")
  aliases              UserAlias[]
  pagamentos_feitos    PendingPayment[]  @relation("Pagador")
  pagamentos_recebidos PendingPayment[]  @relation("Recebedor")

  @@map("users")
}

model UserAlias {
  id      Int    @id @default(autoincrement())
  user_id BigInt
  alias   String
  user    User   @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("user_aliases")
}

model Bag {
  id                 Int              @id @default(autoincrement())
  chat_id            BigInt           @unique
  name               String
  admin_user_id      BigInt
  created_at         DateTime         @default(now())
  welcome_message_id BigInt?
  participants       BagUser[]
  transactions       Transaction[]
  admin              User             @relation("AdminOf", fields: [admin_user_id], references: [id])
  state              ChatState        @default(BOT_ADDED)
  pagamentos         PendingPayment[]

  @@map("bags")
}

model BagUser {
  bag_id        Int
  user_id       BigInt
  joined_at     DateTime @default(now())
  total_spent   Float?   @default(0)
  bag           Bag      @relation(fields: [bag_id], references: [id], onDelete: Cascade)
  user          User     @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@id([bag_id, user_id])
  @@map("bag_users")
}

model Transaction {
  id            Int       @id @default(autoincrement())
  bag_id        Int
  user_id       BigInt
  message_text  String
  created_at    DateTime  @default(now())
  bag           Bag       @relation(fields: [bag_id], references: [id], onDelete: Cascade)
  user          User      @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model PendingPayment {
  id              Int       @id @default(autoincrement())
  bag_id          Int
  user_id_from    BigInt    // Quem deve pagar
  user_id_to      BigInt    // Quem vai receber
  valor           Decimal   @db.Decimal(10, 2)
  pago            Boolean   @default(false)
  data_pagamento  DateTime?

  bag             Bag       @relation(fields: [bag_id], references: [id], onDelete: Cascade)
  devedor         User      @relation("Pagador", fields: [user_id_from], references: [id], onDelete: Cascade)
  recebedor       User      @relation("Recebedor", fields: [user_id_to], references: [id], onDelete: Cascade)

  @@map("pending_payments")
}

enum ChatState {
  BOT_ADDED
  AWAITING_CREATE
  AWAITING_NAME
  BAG_CREATED
  AWAITING_PAYMENTS
  BAG_FINISHED
}
